// mksyscall_windows.sh syscall.go
// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT

package syscall

import "unsafe"
import "syscall"

var (
	modkernel32 = loadDll("kernel32.dll")
	modadvapi32 = loadDll("advapi32.dll")

	procCreateEventW        = getSysProcAddr(modkernel32, "CreateEventW")
	procGetOverlappedResult = getSysProcAddr(modkernel32, "GetOverlappedResult")
	procEscapeCommFunction  = getSysProcAddr(modkernel32, "EscapeCommFunction")
	procSetupComm           = getSysProcAddr(modkernel32, "SetupComm")
	procSetCommTimeouts     = getSysProcAddr(modkernel32, "SetCommTimeouts")
	procSetCommState        = getSysProcAddr(modkernel32, "SetCommState")
	procGetCommState        = getSysProcAddr(modkernel32, "GetCommState")
	procFlushFileBuffers    = getSysProcAddr(modkernel32, "FlushFileBuffers")
	procRegOpenKeyExW       = getSysProcAddr(modadvapi32, "RegOpenKeyExW")
	procRegEnumValueW       = getSysProcAddr(modadvapi32, "RegEnumValueW")
	procRegQueryValueExW    = getSysProcAddr(modadvapi32, "RegQueryValueExW")
	procRegCloseKey         = getSysProcAddr(modadvapi32, "RegCloseKey")
	procGetUserNameW        = getSysProcAddr(modadvapi32, "GetUserNameW")
)

func CreateEventW(sa *syscall.SecurityAttributes, manualReset int, initialState int, name *uint16) (hEv Handle, errno int) {
	r0, _, e1 := syscall.Syscall6(procCreateEventW, 4, uintptr(unsafe.Pointer(sa)), uintptr(manualReset), uintptr(initialState), uintptr(unsafe.Pointer(name)), 0, 0)
	hEv = Handle(r0)
	if hEv == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func GetOverlappedResult(h uint32, ov *syscall.Overlapped, done *uint32, bWait int) (errno int) {
	r1, _, e1 := syscall.Syscall6(procGetOverlappedResult, 4, uintptr(h), uintptr(unsafe.Pointer(ov)), uintptr(unsafe.Pointer(done)), uintptr(bWait), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func EscapeCommFunction(h uint32, fn uint32) (errno int) {
	r1, _, e1 := syscall.Syscall(procEscapeCommFunction, 2, uintptr(h), uintptr(fn), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func SetupComm(h uint32, inQSize uint32, outQSize uint32) (errno int) {
	r1, _, e1 := syscall.Syscall(procSetupComm, 3, uintptr(h), uintptr(inQSize), uintptr(outQSize))
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func SetCommTimeouts(h uint32, cto *CommTimeouts) (errno int) {
	r1, _, e1 := syscall.Syscall(procSetCommTimeouts, 2, uintptr(h), uintptr(unsafe.Pointer(cto)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func setCommState(h uint32, dcb *DCB) (errno int) {
	r1, _, e1 := syscall.Syscall(procSetCommState, 2, uintptr(h), uintptr(unsafe.Pointer(dcb)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func getCommState(h uint32, dcb *DCB) (errno int) {
	r1, _, e1 := syscall.Syscall(procGetCommState, 2, uintptr(h), uintptr(unsafe.Pointer(dcb)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func FlushFileBuffers(h uint32) (errno int) {
	r1, _, e1 := syscall.Syscall(procFlushFileBuffers, 1, uintptr(h), 0, 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func RegOpenKeyEx(h HKEY, name *uint16, options uint32, samDesired REGSAM, result *HKEY) (errno int) {
	r1, _, e1 := syscall.Syscall6(procRegOpenKeyExW, 5, uintptr(h), uintptr(unsafe.Pointer(name)), uintptr(options), uintptr(samDesired), uintptr(unsafe.Pointer(result)), 0)
	if int(r1) != ERROR_SUCCESS {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func RegEnumValue(h HKEY, index uint32, vName *uint16, vNameLen *uint32, reserved *uint32, typ *uint32, data *byte, sz *uint32) (errno int) {
	r1, _, e1 := syscall.Syscall9(procRegEnumValueW, 8, uintptr(h), uintptr(index), uintptr(unsafe.Pointer(vName)), uintptr(unsafe.Pointer(vNameLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(typ)), uintptr(unsafe.Pointer(data)), uintptr(unsafe.Pointer(sz)), 0)
	if int(r1) != ERROR_SUCCESS {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func RegQueryValueEx(h HKEY, vName *uint16, reserved *uint32, typ *uint32, data *byte, sz *uint32) (errno int) {
	r1, _, e1 := syscall.Syscall6(procRegQueryValueExW, 6, uintptr(h), uintptr(unsafe.Pointer(vName)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(typ)), uintptr(unsafe.Pointer(data)), uintptr(unsafe.Pointer(sz)))
	if int(r1) != ERROR_SUCCESS {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}

func RegCloseKey(h HKEY) {
	syscall.Syscall(procRegCloseKey, 1, uintptr(h), 0, 0)
	return
}

func getUserName(buf *uint16, sz *uint32) (errno int) {
	r1, _, e1 := syscall.Syscall(procGetUserNameW, 2, uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(sz)), 0)
	if int(r1) == 0 {
		if e1 != 0 {
			errno = int(e1)
		} else {
			errno = syscall.EINVAL
		}
	} else {
		errno = 0
	}
	return
}
